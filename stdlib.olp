; prelude

; Atoms
(def {nil} {})
(def {otherwise} true)

;function defintion
(def {fun} (\ {args body} {
  def (head args) (\ (tail args) body)
}))

(fun {unpack f l} {
  eval (join (list f) l)
})

(fun {pack f:xs} {
  f xs
})

(fun {comp f g x} {
  f (g x)
})

;several things in sequence
(fun {do:args} {
  if (= args nil)
    {nil}
    {last args}
})

;logical functions
(fun {! x} {
  if (x) 
    {false} 
    {true}
})

(fun {& x y} {
  if (x)
    {y}
    {false}
})

(fun {| x y} {
  if (x)  
    {true}
    {y}
})

;list functions
(fun {fst l} {
  eval (head l)
})

(fun {snd l} {
  eval (head (tail l))
})

(fun {len l} {
  foldl (\ {acc li} {+ acc 1}) 0 l
})

(fun {reverse l} {
  if (= l nil)
    {nil}
    {join (reverse (tail l)) (head l)}
})

(fun {nth n l} {
  if (<= n 0)
    {fst l}
    {nth (- n 1) (tail l)}
})

(fun {last l} {
  nth (- (len l) 1) l
})

(fun {take n l} {
  if (<= n 0)
    {l}
    {join (head l) (take (- n 1) (tail l))}
})

(fun {drop n l} {
  if (<= n 0)
    {l}
    {drop (- n 1) (tail l)}
})

(fun {split n l} {
  list (take n l) (drop n l)
})

(fun {elem x l} {
  foldl (\ {acc li} {
    if (= li x)
      {| acc true}
      {| acc false}
  }) false l
})

(fun {map f l} {
  if (= l nil)
    {nil}
    {join (list (f (fst l))) (map f (tail l))}
})

(fun {filter pred l} {
  if (= l nil)
    {nil}
    {join (if (pred (fst l)) 
            {head l} 
            {nil})
          (filter pred (tail l))
    }
})

(fun {foldl f base l} {
  if (= l nil)
    {base}
    {foldl f (f base (fst l)) (tail l)}
})

(fun {sum l} {
  foldl + 0 l
})

(fun {prod l} {
  foldl * 1 l
})

;conditional functions
(fun {select:cases} {
  if (= cases nil)
    {error "No case found"}
    {if (fst (fst cases)) 
      {snd (fst cases)} 
      {unpack select (tail cases)}
    }
})

(fun {case x:cases} {
  if (= cases nil)
    {error "No cases found"}
    {if (= x (fst (fst cases)))
      {snd (fst cases)}
      {unpack case (join (list x) (tail cases))}
    }
})